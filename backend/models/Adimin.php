<?php

namespace backend\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "adimin".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $last_login_time
 * @property integer $last_login_ip
 */
class Adimin extends \yii\db\ActiveRecord implements IdentityInterface
{

    public $code;
    public $role;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'adimin';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username',  'password_hash','email', 'status', ], 'required'],
            [['status', 'created_at', 'updated_at', 'last_login_time', 'last_login_ip'], 'integer'],
            [['username', 'auth_key', 'password_hash', 'password_reset_token', 'email'], 'string', 'max' => 255],
            [['username'],'unique'],
            [['email'],'email'],
            [['email'],'unique'],
            ['role','safe'],
            ['code', 'captcha','captchaAction'=>'admin/captcha','on'=>'admin/login'] //支持前端以及后端验证验证码
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用戶名',
            'auth_key' => '记住密码',
            'password_hash' => '密码',
            'password_reset_token' => '重置密码',
            'email' => '邮箱',
            'status' => '删除',
            'created_at' => '创建时间',
            'updated_at' => '更新时间',
            'last_login_time' => '最后登录的时间',
            'last_login_ip' => '最后登录的IP',
            'code'=>'验证码',
            'password'=>'原密码',
            'password_x'=>'新密码',
            'password_s'=>'确认新密码',
            'role'=>'权限'

        ];
    }

    public static function findIdentity($id)
    {
        return static::findOne($id);
        // TODO: Implement findIdentity() method.
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    public function getId()
    {
        return $this->id;
        // TODO: Implement getId() method.
    }

    public function getAuthKey()
    {
        return $this->auth_key;
        // TODO: Implement getAuthKey() method.
    }

    public function validateAuthKey($authKey)
    {
        return $authKey===$this->getAuthKey();
        // TODO: Implement validateAuthKey() method.
    }

    //保存之前执行的代码
    public function beforeSave($insert)
    {
        if($insert){
            //密码加密
            $this->password_hash=\Yii::$app->security->generatePasswordHash($this->password_hash);
            //添加时间
            $this->created_at=time();
            $this->auth_key=Yii::$app->security->generateRandomString();
        }


        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public static function getRoleItems()
    {
        return ArrayHelper::map(\Yii::$app->authManager->getRoles(),'name','description');
    }

    //用户添加角色
    public function saves()
    {
        $authManager = Yii::$app->authManager;
        //获取一个角色
        if (is_array($this->role)) {
            foreach ($this->role as $roleName) {
                $role = $authManager->getRole($roleName);
                $authManager->assign($role, $this->id);
            }
        }
    }
    //用户修改
    public function updates(){
        $authManager= Yii::$app->authManager;
        if(is_array($this->role)){
            $authManager->revokeAll($this->id);//清除该用户关联的所有角色
            foreach ($this->role as $roleName){
                $role=$authManager->getRole($roleName);
                $authManager->assign($role,$this->id);
            }
        }else{
            $authManager->revokeAll($this->id);//清除该用户关联的所有角色
        }
    }
    //用户角色删除
    public function deletes(){
        $authManager= Yii::$app->authManager;
        $authManager->revokeAll($this->id);
    }

    public function getMenuItems(){
        $menuItems = [];
        //1 . 获取所有一级菜单
        $menus = Menu::findAll(['parent_id'=>0]);
        //2 遍历一级菜单
        foreach ($menus as $menu){
            //3.获取该一级菜单的所有子菜单
//            var_dump($menu);exit;
            $children = Menu::findAll(['parent_id'=>$menu['id']]);
//            var_dump($children);exit;
            $items = [];
            //4遍历所有子菜单
            foreach ($children as $child){
                //根据用户权限决定是否添加到items里面
                if(Yii::$app->user->can($child->url)){
                    $items[] = ['label' =>$child->label, 'url' => [$child->url]];
                }
            }
            if(empty($items)){
                continue;
            }
            $menuItems[] = ['label'=>$menu->label,'items'=>$items];
        }
        return $menuItems;
    }


}
